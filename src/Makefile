# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /home/sm0179/gtest-1.7.0

# Where to find user code.
USER_DIR = .
UTILS_DIR=../utils
UTILS_INC=-I../utils -I /data2/apps/htslib -I /data2/apps

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include $(UTILS_INC)

# Flags passed to the C++ compiler.
CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread -DNDEBUG 
EXTRAFLAGS += -O0 

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = unittest_bidir_search_bwd_fwd vBWT
#TESTS = vBWT

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h
SDSL_HEADERS= /home/sm0179/include/
#VBWT_HEADERS= /home/sm0179/gramtools/include/
#SDSL_HEADERS= /home/zam/include/
VBWT_HEADERS= ../include/
BOOST_HEADERS= /data2/apps/boost_1_60_0/

LIBS=/home/sm0179/lib/ 
LIBS2=/data2/apps/htslib/


# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.


bidir_search.o: $(USER_DIR)/bidir_search.cpp $(VBWT_HEADERS)/bwt_search.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -L $(LIBS) -c $(USER_DIR)/bidir_search.cpp -lsdsl -ldivsufsort -ldivsufsort64

skip.o: $(USER_DIR)/skip.cpp $(VBWT_HEADERS)/bwt_search.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -c $(USER_DIR)/skip.cpp -lsdsl -ldivsufsort -ldivsufsort64

get_location.o: $(USER_DIR)/get_location.cpp $(VBWT_HEADERS)/bwt_search.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -c $(USER_DIR)/get_location.cpp -lsdsl -ldivsufsort -ldivsufsort64

bidir_search_bwd.o: $(USER_DIR)/bidir_search_bwd.cpp $(VBWT_HEADERS)/bwt_search.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -c $(USER_DIR)/bidir_search_bwd.cpp -lsdsl -ldivsufsort -ldivsufsort64

#bidir_search_fwd.o: $(USER_DIR)/bidir_search_fwd.cpp $(VBWT_HEADERS)/bwt_search.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -c $(USER_DIR)/bidir_search_fwd.cpp -lsdsl -ldivsufsort -ldivsufsort64

precalc_kmer_matches.o: $(USER_DIR)/precalc_kmer_matches.cpp $(VBWT_HEADERS)/bwt_search.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -c $(USER_DIR)/precalc_kmer_matches.cpp -lsdsl -ldivsufsort -ldivsufsort64

parse_masks.o: $(USER_DIR)/parse_masks.cpp $(VBWT_HEADERS)/bwt_search.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -c $(USER_DIR)/parse_masks.cpp -lsdsl -ldivsufsort -ldivsufsort64

csa_construction.o: $(USER_DIR)/csa_construction.cpp $(VBWT_HEADERS)/bwt_search.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -c $(USER_DIR)/csa_construction.cpp -lsdsl -ldivsufsort -ldivsufsort64

map.o: $(USER_DIR)/map.cpp $(VBWT_HEADERS)/bwt_search.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -c $(USER_DIR)/map.cpp -lsdsl -ldivsufsort -ldivsufsort64


sitemarker.o: $(USER_DIR)/sitemarker.cpp $(VBWT_HEADERS)/sitemarker.hpp  $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -c $(USER_DIR)/sitemarker.cpp


vBWT: sitemarker.o bidir_search.o skip.o get_location.o bidir_search_bwd.o precalc_kmer_matches.o parse_masks.o csa_construction.o map.o 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -L $(LIBS) -L $(LIBS2) $^ -o $@ -lsdsl -ldivsufsort -ldivsufsort64 -lhts -lz

#Bwt_search.o : $(USER_DIR)/bwt_search.cpp $(USER_DIR)/bwt_search.h libsdsl.a $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -L $(LIBS) -c $(USER_DIR)/bwt_search.cpp -lsdsl -ldivsufsort -ldivsufsort64

unittest_bidir_search_bwd_fwd.o : $(USER_DIR)/test/unittest_bidir_search_bwd_fwd.cpp $(VBWT_HEADERS)/bwt_search.h $(VBWT_HEADERS)/sitemarker.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -I $(BOOST_HEADERS) -c $(USER_DIR)/test/unittest_bidir_search_bwd_fwd.cpp

unittest_bidir_search_bwd_fwd : sitemarker.o bidir_search.o skip.o get_location.o csa_construction.o bidir_search_bwd.o unittest_bidir_search_bwd_fwd.o 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTRAFLAGS) -I $(SDSL_HEADERS) -I $(VBWT_HEADERS) -L$(GTEST_DIR) -L $(LIBS) $^ -o $@ -lsdsl -ldivsufsort -ldivsufsort64 -lgtest -lpthread
